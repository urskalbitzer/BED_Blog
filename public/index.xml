<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Behaviour | Environment | Data</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>Behaviour | Environment | Data</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Urs Kalbitzer 2020</copyright><lastBuildDate>Sat, 11 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Behaviour | Environment | Data</title>
      <link>/</link>
    </image>
    
    <item>
      <title>African Mammals</title>
      <link>/post/african-mammals-map/</link>
      <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/african-mammals-map/</guid>
      <description>


&lt;p&gt;Interested in the distribution of animal species on a global or continental level? This can be easily illustrated with R using the data provided by the &lt;a href=&#34;https://www.iucnredlist.org&#34;&gt;IUCN Red List&lt;/a&gt;. In this post, I will focus on mammals in Africa, the continent where I have conducted most of my field work. But the code below can be easily adapted to other areas of the world and other taxonomic groups of species, or only species at low or high risk of extinction (though the completeness of the IUCN data is variable across different groups).&lt;/p&gt;
&lt;p&gt;In this post, I describe the following steps:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Download and process the &lt;em&gt;IUCN Red List&lt;/em&gt; spatial data set for terrestrial mammals&lt;/li&gt;
&lt;li&gt;Download a map of Africa&lt;/li&gt;
&lt;li&gt;Create a hexagon grid for Africa&lt;/li&gt;
&lt;li&gt;Combine species ranges with the grid and plot the map&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The processing and summarizing of the spatial data is mostly done with the impressive &lt;code&gt;sf&lt;/code&gt; package. For my first attempts to work with spatial data in R (more specifically with vector data), I used the &lt;code&gt;sp&lt;/code&gt; package. But the &lt;code&gt;sf&lt;/code&gt; package, which is the successor of the &lt;code&gt;sp&lt;/code&gt;, is much easier to use. Additionally, it integrates some of the &lt;a href=&#34;https://www.tidyverse.org&#34;&gt;&lt;code&gt;tidyverse&lt;/code&gt;&lt;/a&gt; functions, most importantly many of the &lt;code&gt;dplyr&lt;/code&gt; functions, which so many R users are already using for other purposes. Also, the &lt;code&gt;sf&lt;/code&gt; package is very well documented and the vignettes are extremely helpful. They can be found on the &lt;a href=&#34;https://github.com/r-spatial/sf&#34;&gt;github page of the package&lt;/a&gt; or by typing &lt;code&gt;vignette(package = &amp;quot;sf&amp;quot;)&lt;/code&gt;. I also would like to mention the book &lt;a href=&#34;https://geocompr.robinlovelace.net&#34;&gt;‘Geocomputation with R’&lt;/a&gt;, which is a very informative (open source) resource for anybody interested in working with spatial data in R.&lt;/p&gt;
&lt;div id=&#34;download-and-process-the-iucn-red-list-spatial-data-set-for-terrestrial-mammals&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. Download and process the &lt;em&gt;IUCN Red List&lt;/em&gt; spatial data set for terrestrial mammals&lt;/h2&gt;
&lt;div id=&#34;prepare-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1.1 Prepare R&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(list = ls())
library(tidyverse)
library(sf)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;download-and-process-the-iucn-terrestial-mammals-shapefile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1.2 Download and process the &lt;em&gt;IUCN&lt;/em&gt; terrestial mammals shapefile&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;IUCN Red List&lt;/em&gt; spatial data can be obtained &lt;a href=&#34;https://www.iucnredlist.org/resources/spatial-data-download&#34;&gt;here&lt;/a&gt;. The &lt;em&gt;IUCN&lt;/em&gt; datasets are freely available for non-commercial use, but they have to be downloaded manually because you have to register for an account and provide a description of the intended usage. For academic use, you can (usually) download the dataset immediately after you made your request.&lt;/p&gt;
&lt;p&gt;The ranges of populations and species are all provided as polygons in the downloadable shapefiles. However, some species might be missing, and some ranges might be incomplete. Nevertheless, it is an impressive data set, and at least for primates, it looks fairly complete. Further details (and limitations) can be found on the &lt;em&gt;IUCN&lt;/em&gt; spatial data webpage.&lt;/p&gt;
&lt;p&gt;For this post, I downloaded the “Terrestrial Mammal” datasets, which is about ~ 600 MB. Then, I moved the downloaded folder (‘TERRESTRIAL_MAMMALS’) into the folder “~/Sync/iucn_data/” on my harddrive and renamed it to ‘TERRESTRIAL_MAMMALS_2020_01_11’.&lt;/p&gt;
&lt;p&gt;I split up the following process into two steps: 1) load, simplify (&lt;em&gt;i.e.&lt;/em&gt;, reduce the size of the object), and save the processed shapefile a .gpkg file; and 2) re-load the processed files. The first step will not be evaluated in the final notebook so that the 600 MB shapefile does not have to be processed every time I run this notebook.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mammals &amp;lt;- st_read(&amp;quot;~/Sync/iucn_data/TERRESTRIAL_MAMMALS_2020_01_11&amp;quot;)

# Simplify the polygons to reduce the size of the object/file. This may take a
# few moments but the size of the object (in the R environment) changes from 906
# Mb to 8.4 Mb (with dTolerance = 5), which is much easier to handle.
mammals_simple &amp;lt;- mammals %&amp;gt;% 
  st_simplify(dTolerance = 5)

# Write the object to a file and clean up. I use .gpkg extension here because it
# just requires one file instead of several files created for shapefiles. Also,
# it&amp;#39;s an open format and it appears to be just as good as shapefiles (at least
# for everything I&amp;#39;ve done so far). Look here for more information:
# https://www.gis-blog.com/geopackage-vs-shapefile/
st_write(mammals_simple, &amp;quot;data/iucn_mammal_distribution.gpkg&amp;quot;)
rm(list = c(&amp;quot;mammals&amp;quot;, &amp;quot;mammals_simple&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; I set the &lt;code&gt;dTolerance&lt;/code&gt; argument to 5, but for a more precise map, it might be good to change it to 0.1 or a lower value.&lt;/p&gt;
&lt;p&gt;Now, load the file (step 2)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mammals &amp;lt;- st_read(&amp;quot;data/iucn_mammal_distribution.gpkg&amp;quot;) %&amp;gt;% 
  select(binomial, presence,legend, category)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Reading layer `iucn_mammal_distribution&amp;#39; from data source `/Users/urs/Google Drive/Data Blog/BED_Blog/content/post/african-mammals-map/data/iucn_mammal_distribution.gpkg&amp;#39; using driver `GPKG&amp;#39;
## Simple feature collection with 12908 features and 27 fields (with 10729 geometries empty)
## geometry type:  MULTIPOLYGON
## dimension:      XY
## bbox:           xmin: -179.999 ymin: -53.83276 xmax: 179.999 ymax: 89.9
## epsg (SRID):    4326
## proj4string:    +proj=longlat +datum=WGS84 +no_defs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I only kept four of the columns: &lt;code&gt;binomial&lt;/code&gt; (the species name), &lt;code&gt;presence&lt;/code&gt; and &lt;code&gt;legend&lt;/code&gt; (indicating whether a population is still present), and &lt;code&gt;category&lt;/code&gt; (the risk category for each species). For other projects, additional columns can be added. For example, &lt;code&gt;order_&lt;/code&gt; or &lt;code&gt;family&lt;/code&gt; indicate the taxonomic order/family of a species.&lt;/p&gt;
&lt;p&gt;Quick look at the sf object:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(mammals)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 6 features and 4 fields (with 4 geometries empty)
## geometry type:  MULTIPOLYGON
## dimension:      XY
## bbox:           xmin: -58.02031 ymin: -23.35528 xmax: 29.50909 ymax: 7.832815
## epsg (SRID):    4326
## proj4string:    +proj=longlat +datum=WGS84 +no_defs
##                   binomial presence            legend category
## 1 Nyctereutes procyonoides        1 Extant (resident)       LC
## 2         Rattus lutreolus        1 Extant (resident)       LC
## 3     Rhinolophus subrufus        1 Extant (resident)       DD
## 4           Mops spurrelli        1 Extant (resident)       LC
## 5         Clyomys laticeps        1 Extant (resident)       LC
## 6       Eonycteris spelaea        1 Extant (resident)       LC
##                             geom
## 1             MULTIPOLYGON EMPTY
## 2             MULTIPOLYGON EMPTY
## 3             MULTIPOLYGON EMPTY
## 4 MULTIPOLYGON (((16.12875 4....
## 5 MULTIPOLYGON (((-47.53412 -...
## 6             MULTIPOLYGON EMPTY&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For an explanation of sf objects, look at the &lt;a href=&#34;https://cran.r-project.org/web/packages/sf/vignettes/sf1.html&#34;&gt;first vignette of the sf package&lt;/a&gt;. Every row in this data frame represents one population of species &lt;code&gt;binomial&lt;/code&gt;, with additional information about the presence and risk category (columns &lt;code&gt;presence&lt;/code&gt;, &lt;code&gt;legend&lt;/code&gt;, and &lt;code&gt;category&lt;/code&gt;). The sf-column &lt;code&gt;geom&lt;/code&gt; contains the geographic information describing the range of each population. As far as I understand this data set, several populations might be combined into one row (the sf-column can contain several polygons), but in other cases, each population has its own row.&lt;/p&gt;
&lt;p&gt;We can simply plot all polygons (for all rows) with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(st_geometry(mammals))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/african-mammals-map/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This plot shows the distributions of all mammal species/populations, but it also includes populations that are no longer present. Let’s have a look at the different codes for &lt;code&gt;presence&lt;/code&gt; and the description, which can be found in the column &lt;code&gt;legend&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mammals %&amp;gt;%
  st_set_geometry(NULL) %&amp;gt;%
  distinct(presence, legend) %&amp;gt;% 
  arrange(presence)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    presence                                            legend
## 1         1                                 Extant (resident)
## 2         1                    Extant &amp;amp; Introduced (resident)
## 3         1                  Extant &amp;amp; Reintroduced (resident)
## 4         1          Extant &amp;amp; Vagrant (seasonality uncertain)
## 5         1              Extant &amp;amp; Origin Uncertain (resident)
## 6         1                    Extant (seasonality uncertain)
## 7         1                             Extant (non-breeding)
## 8         1                       Extant &amp;amp; Vagrant (resident)
## 9         2                        Probably Extant (resident)
## 10        2     Probably Extant &amp;amp; Origin Uncertain (resident)
## 11        2           Probably Extant &amp;amp; Introduced (resident)
## 12        3                        Possibly Extant (resident)
## 13        3     Possibly Extant &amp;amp; Origin Uncertain (resident)
## 14        3           Possibly Extant (seasonality uncertain)
## 15        3                         Possibly Extant (passage)
## 16        3 Possibly Extant &amp;amp; Vagrant (seasonality uncertain)
## 17        3           Possibly Extant &amp;amp; Introduced (resident)
## 18        3          Possibly Extant &amp;amp; Vagrant (non-breeding)
## 19        4                                  Possibly Extinct
## 20        4                     Possibly Extinct &amp;amp; Introduced
## 21        5                                           Extinct
## 22        5                        Extinct &amp;amp; Origin Uncertain
## 23        5                              Extinct &amp;amp; Introduced
## 24        5                            Extinct &amp;amp; Reintroduced
## 25        6                                Presence Uncertain
## 26        6             Presence Uncertain &amp;amp; Origin Uncertain
## 27        6                      Presence Uncertain &amp;amp; Vagrant&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # knitr::kable()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Codes/numbers 1, 2, and 3 refer to ‘extant’, ‘probably extant’, and ‘possibly extant’ populations, and I only keep these populations here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mammals_extant &amp;lt;- mammals %&amp;gt;% 
  filter(presence %in% c(1,2,3))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;download-a-map-of-africa&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. Download a map of Africa&lt;/h2&gt;
&lt;p&gt;In R, it’s very easy to get maps of countries or continents from &lt;a href=&#34;https://www.naturalearthdata.com&#34; class=&#34;uri&#34;&gt;https://www.naturalearthdata.com&lt;/a&gt; using the &lt;code&gt;rnaturalearth&lt;/code&gt; package. With the &lt;code&gt;ne_countries()&lt;/code&gt; function, all countries (as polygons) for the specified continent can be downloaded. Here, I am only interested in a map of the whole continent, not single countries. This can be achieved with the &lt;code&gt;dplyr::summarize()&lt;/code&gt; function, which ‘summarizes’ the polygons in all rows in the sf object (the countries) to one polygon (the continent). One of the examples showing how nicely the tidyverse functionality is integrated into the &lt;code&gt;sf&lt;/code&gt; package!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;africa_map &amp;lt;- rnaturalearth::ne_countries(continent = &amp;quot;Africa&amp;quot;,
                                          returnclass = &amp;quot;sf&amp;quot;) %&amp;gt;%
  st_set_precision(1e9) %&amp;gt;%
  summarize
{
par(mar = c(0, 0, 0, 0))
plot(st_geometry(africa_map))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/african-mammals-map/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-hexagon-grid-for-africa&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3. Create a hexagon grid for Africa&lt;/h2&gt;
&lt;p&gt;Since I want to illustrate how species richness varies across regions, the number of species have to be summarized for some kind of (spatial) subsets of Africa. For example, this could be done by country. But here, I use a grid of equally sized hexagon cells to illustrate the varying species richness across the continent. This is possible with the &lt;code&gt;sf::st_make_grid()&lt;/code&gt; function. The argument &lt;code&gt;square = F&lt;/code&gt; specifies that hexagons are created instead of squares. Furthermore, I create a &lt;code&gt;grid_id&lt;/code&gt; column, which will be required as identifier for grid cells further below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;africa_grid &amp;lt;- st_make_grid(africa_map,
                            what = &amp;quot;polygons&amp;quot;,
                            cellsize = 0.75,
                            square = F) %&amp;gt;% 
  st_sf() %&amp;gt;% 
  mutate(grid_id = row_number())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: the cell size can be adjusted by changing the &lt;code&gt;cellsize&lt;/code&gt; argument, but this will also affect the number of species per cell. Larger cells are more likely to intersect with more species than smaller cells.&lt;/p&gt;
&lt;p&gt;For the map, I only want to keep the parts of the grid cells that are on the continent. This might be problematic in some cases because the cells at the edge of the continent are smaller than cells within the continent. But since I only summarize terrestrial mammals here, I think it might also be misleading if the cells cover non-terrestrial area without including marine mammals.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;africa_grid_clipped &amp;lt;- st_intersection(africa_grid, africa_map)

{
plot(africa_map$geometry, reset = F, axes = T)
plot(st_geometry(africa_grid_clipped), color = &amp;quot;white&amp;quot;,
     add = T, border = rgb(0, 0, 0, 0.3))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/african-mammals-map/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;combine-species-ranges-with-the-grid-and-plot-the-map&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;4. Combine species ranges with the grid and plot the map&lt;/h2&gt;
&lt;div id=&#34;only-keep-population-ranges-within-africa&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;4.1 Only keep population ranges within Africa&lt;/h3&gt;
&lt;p&gt;With &lt;code&gt;st_intersection()&lt;/code&gt;, only the portion of population ranges within Africa are kept.
Then, ranges are ‘summarized’ by species, which means that for species with several rows in the data frame, these rows are combined into one row with a (multi) polygon describing the entire range of this species. The use of &lt;code&gt;dplyr::group_by()&lt;/code&gt; in combination with &lt;code&gt;dplyr::summarize()&lt;/code&gt; with an sf object is another great example for the integration of the tidyverse functionality in the sf package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;africa_mammals &amp;lt;- st_intersection(mammals, africa_map) %&amp;gt;% 
  group_by(binomial) %&amp;gt;% 
  summarize()
{
par(mar = c(2,2,2,2))
plot(st_geometry(africa_mammals), axes = T)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/african-mammals-map/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;combine-ranges-with-the-grid&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;4.2 Combine ranges with the grid&lt;/h3&gt;
&lt;p&gt;The range polygons can be combined with the grid map using the &lt;code&gt;sf::st_join()&lt;/code&gt; function. Then, the number of species is counted per grid cell using the &lt;code&gt;grid_id&lt;/code&gt; column created above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This may take a few minutes
species_per_cell &amp;lt;- africa_grid_clipped %&amp;gt;% 
  st_join(africa_mammals)

species_per_cell_sums &amp;lt;- species_per_cell %&amp;gt;% 
  group_by(grid_id) %&amp;gt;% 
  summarize(species_n = n())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-the-plot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;4.3 Create the plot&lt;/h3&gt;
&lt;p&gt;The standard output with &lt;code&gt;plot()&lt;/code&gt; looks like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(species_per_cell_sums[&amp;quot;species_n&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/african-mammals-map/index_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The plot created with &lt;code&gt;plot()&lt;/code&gt; can be customized, but I find it easier to customize plots with the &lt;code&gt;ggplot2&lt;/code&gt; package. Therefore, I create another plot with &lt;code&gt;ggplot()&lt;/code&gt; using a different color palette, and applying some other modifications.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;african_mammals_map &amp;lt;- ggplot() +
  geom_sf(data = species_per_cell_sums,
          aes(fill = species_n),
          size = 0) +
  scale_fill_gradient2(name = &amp;quot;Number of\nSpecies&amp;quot;,
                       low = &amp;quot;#004529&amp;quot;,
                       mid = &amp;quot;#f7fcb9&amp;quot;,
                       high = &amp;quot;#7f0000&amp;quot;,
                       midpoint = max(species_per_cell_sums$species_n)/2) +
  geom_sf(data = africa_map, fill = NA) +
  labs(title = &amp;quot;Mammal Species in Africa&amp;quot;) +
  theme_void() +
  theme(legend.position = c(0.1, 0.1),
        legend.justification = c(0, 0),
        plot.title = element_text(hjust = .5))
african_mammals_map&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/african-mammals-map/index_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Creation and Detection of Clusters in Social Networks - Part 2</title>
      <link>/post/social-clusters-ii/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/social-clusters-ii/</guid>
      <description>


&lt;p&gt;In the &lt;a href=&#34;/social-clusters-I/&#34;&gt;previous post&lt;/a&gt;, I simulated clustered networks with varying strength of within-group, between-close-groups, and between-group social relationships. In part 2, I am using some of the methods provided by the &lt;code&gt;igraph&lt;/code&gt; package to test how well these simulated clusters can be (re)-detected.&lt;/p&gt;
&lt;div id=&#34;determine-clustering-using-different-methods-and-compare-the-results&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;2. Determine clustering using different methods and compare the results&lt;/h1&gt;
&lt;div id=&#34;prepare-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2.1 Prepare R&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(list = ls())
library(tidyverse)
library(tidygraph)
library(ggraph)
library(igraph)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition to these packages, this notebook requires the installation of the following packages: &lt;code&gt;DT&lt;/code&gt;, &lt;code&gt;cowplot&lt;/code&gt;, &lt;code&gt;ggrepel&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;recreate-the-network-from-previous-post&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2.2 Recreate the network from previous post&lt;/h3&gt;
&lt;p&gt;To avoid repetition, the code is not shown here, but can be copied from the &lt;a href=&#34;/social-clusters-I/&#34;&gt;previous post&lt;/a&gt;. The two objects that are required from there are &lt;code&gt;individual_df&lt;/code&gt; and &lt;code&gt;network_df&lt;/code&gt;.&lt;br /&gt;
The networks looked like that:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/social-clusters-II/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;One important note&lt;/em&gt;:&lt;/strong&gt; My motivation for this small project was my research on a group of ~50 adult red colobus monkeys. Therefore, I simulated networks where most individuals were somehow connected. The plot above, however, only shows association indices &lt;span class=&#34;math inline&#34;&gt;\(\ge\)&lt;/span&gt; 0.3 to make it easier to see the clusters. The complete network is much denser (see the final plot of this post). After finalizing the draft of this post, I realized that this may have affected how well (or not) the algorithms detected the (sub)-groups and therefore wanted to mention it here.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;use-different-algorithms-to-detect-clusters&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2.3 Use different algorithms to detect clusters&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;igraph&lt;/code&gt;-package provides several functions to detect communities within a network, which start with &lt;code&gt;cluster_&lt;/code&gt; (type &lt;code&gt;?communities&lt;/code&gt; in R for a complete list). Most of these algorithms are explained &lt;a href=&#34;https://dshizuka.github.io/networkanalysis/05_community.html&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://stackoverflow.com/questions/9471906/what-are-the-differences-between-community-detection-algorithms-in-igraph&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before using the &lt;code&gt;cluster_&lt;/code&gt; functions, the networks have to be transformed into &lt;code&gt;igraph&lt;/code&gt; objects.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_to_network &amp;lt;- function(network_df, weight_col){
  network &amp;lt;- graph_from_data_frame(select(network_df,
                                          from = Ind_A, to = Ind_B,
                                          weight = matches(weight_col)),
                              directed = FALSE)
  return(network)
}

network_1 &amp;lt;- df_to_network(network_df, weight_col = &amp;quot;S1&amp;quot;)
network_2 &amp;lt;- df_to_network(network_df, weight_col = &amp;quot;S2&amp;quot;)
network_3 &amp;lt;- df_to_network(network_df, weight_col = &amp;quot;S3&amp;quot;)
network_4 &amp;lt;- df_to_network(network_df, weight_col = &amp;quot;S4&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the standard output for such an object:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;network_1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## IGRAPH 1485755 UNW- 50 1225 -- 
## + attr: name (v/c), weight (e/n)
## + edges from 1485755 (vertex names):
##  [1] ind_01--ind_02 ind_01--ind_03 ind_01--ind_04 ind_01--ind_05 ind_01--ind_06
##  [6] ind_01--ind_07 ind_01--ind_08 ind_01--ind_09 ind_01--ind_10 ind_01--ind_11
## [11] ind_01--ind_12 ind_01--ind_13 ind_01--ind_14 ind_01--ind_15 ind_01--ind_16
## [16] ind_01--ind_17 ind_01--ind_18 ind_01--ind_19 ind_01--ind_20 ind_01--ind_21
## [21] ind_01--ind_22 ind_01--ind_23 ind_01--ind_24 ind_01--ind_25 ind_01--ind_26
## [26] ind_01--ind_27 ind_01--ind_28 ind_01--ind_29 ind_01--ind_30 ind_01--ind_31
## [31] ind_01--ind_32 ind_01--ind_33 ind_01--ind_34 ind_01--ind_35 ind_01--ind_36
## [36] ind_01--ind_37 ind_01--ind_38 ind_01--ind_39 ind_01--ind_40 ind_01--ind_41
## + ... omitted several edges&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here’s the output if one of the &lt;code&gt;cluster_&lt;/code&gt; functions is applied to a network, in this example the &lt;em&gt;fast-greedy&lt;/em&gt; algorithm to the first network (S1):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cluster_fast_greedy(network_1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## IGRAPH clustering fast greedy, groups: 3, mod: 0.32
## + groups:
##   $`1`
##    [1] &amp;quot;ind_05&amp;quot; &amp;quot;ind_09&amp;quot; &amp;quot;ind_12&amp;quot; &amp;quot;ind_17&amp;quot; &amp;quot;ind_20&amp;quot; &amp;quot;ind_23&amp;quot; &amp;quot;ind_26&amp;quot; &amp;quot;ind_29&amp;quot;
##    [9] &amp;quot;ind_31&amp;quot; &amp;quot;ind_32&amp;quot; &amp;quot;ind_36&amp;quot; &amp;quot;ind_38&amp;quot; &amp;quot;ind_40&amp;quot; &amp;quot;ind_43&amp;quot; &amp;quot;ind_49&amp;quot; &amp;quot;ind_50&amp;quot;
##   
##   $`2`
##    [1] &amp;quot;ind_03&amp;quot; &amp;quot;ind_15&amp;quot; &amp;quot;ind_19&amp;quot; &amp;quot;ind_21&amp;quot; &amp;quot;ind_22&amp;quot; &amp;quot;ind_27&amp;quot; &amp;quot;ind_28&amp;quot; &amp;quot;ind_37&amp;quot;
##    [9] &amp;quot;ind_39&amp;quot; &amp;quot;ind_45&amp;quot; &amp;quot;ind_46&amp;quot; &amp;quot;ind_47&amp;quot; &amp;quot;ind_48&amp;quot;
##   
##   $`3`
##    [1] &amp;quot;ind_01&amp;quot; &amp;quot;ind_02&amp;quot; &amp;quot;ind_04&amp;quot; &amp;quot;ind_06&amp;quot; &amp;quot;ind_07&amp;quot; &amp;quot;ind_08&amp;quot; &amp;quot;ind_10&amp;quot; &amp;quot;ind_11&amp;quot;
##   + ... omitted several groups/vertices&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thus, the function tries to detect clusters (called &lt;code&gt;groups&lt;/code&gt;) and assigns each individual to such a group. Furthermore, it calculates modularity (&lt;code&gt;mod&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The aim of this post is to use several of these functions and then compare 1) the number of detected groups and 2) the detected group membership of all individuals to what was simulated (&lt;em&gt;i.e.&lt;/em&gt;, the ‘true’ values). Furthermore, I will extract the global modularity, which can be used to compare the quality of different cluster methods (many of the algorithms try to maximize modularity when searching for clusters).&lt;/p&gt;
&lt;p&gt;Therefore, I first define a function to apply the specified algorithm to a network, extract these metrics from the resulting &lt;code&gt;communities&lt;/code&gt;-object, and return them in a dataframe.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_communities &amp;lt;- function(igraph_network, cluster_method = NULL){
  if(is.null(cluster_method)) { stop(&amp;quot;no method specificied&amp;quot;) }
  community_object &amp;lt;- do.call(cluster_method, list(igraph_network))
  return(tibble(Ind = community_object$names,
                Ind_Cluster = community_object$membership,
                global_modularity = modularity(igraph_network,
                                               community_object$membership,
                                               weights = E(igraph_network)$weight),
                method = cluster_method) %&amp;gt;% 
           arrange(Ind))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_communities(network_1, &amp;quot;cluster_fast_greedy&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 50 x 4
##    Ind    Ind_Cluster global_modularity method             
##    &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;              
##  1 ind_01           3             0.318 cluster_fast_greedy
##  2 ind_02           3             0.318 cluster_fast_greedy
##  3 ind_03           2             0.318 cluster_fast_greedy
##  4 ind_04           3             0.318 cluster_fast_greedy
##  5 ind_05           1             0.318 cluster_fast_greedy
##  6 ind_06           3             0.318 cluster_fast_greedy
##  7 ind_07           3             0.318 cluster_fast_greedy
##  8 ind_08           3             0.318 cluster_fast_greedy
##  9 ind_09           1             0.318 cluster_fast_greedy
## 10 ind_10           3             0.318 cluster_fast_greedy
## # … with 40 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using this function, I apply several of the provided &lt;code&gt;igraph&lt;/code&gt; methods with the four networks.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;networks &amp;lt;- grep(&amp;quot;network_\\d&amp;quot;, ls(), value = T)
cluster_methods &amp;lt;- c(&amp;quot;cluster_fast_greedy&amp;quot;, &amp;quot;cluster_infomap&amp;quot;,
                     &amp;quot;cluster_label_prop&amp;quot;, &amp;quot;cluster_optimal&amp;quot;,
                     &amp;quot;cluster_louvain&amp;quot;, &amp;quot;cluster_walktrap&amp;quot;)

for(network_i in seq_along(networks)){
  for(cluster_method_j in seq_along(cluster_methods)){
    df_temp &amp;lt;- get_communities(igraph_network = get(networks[[network_i]]),
                               cluster_method = cluster_methods[[cluster_method_j]])
    df_temp$network &amp;lt;- networks[[network_i]]
    if(network_i == 1 &amp;amp; cluster_method_j == 1) community_df &amp;lt;- df_temp
    else community_df &amp;lt;- bind_rows(community_df, df_temp)
  }
}

# Show structure of created dataframe
str(community_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;:    1200 obs. of  5 variables:
##  $ Ind              : chr  &amp;quot;ind_01&amp;quot; &amp;quot;ind_02&amp;quot; &amp;quot;ind_03&amp;quot; &amp;quot;ind_04&amp;quot; ...
##  $ Ind_Cluster      : num  3 3 2 3 1 3 3 3 1 3 ...
##  $ global_modularity: num  0.318 0.318 0.318 0.318 0.318 ...
##  $ method           : chr  &amp;quot;cluster_fast_greedy&amp;quot; &amp;quot;cluster_fast_greedy&amp;quot; &amp;quot;cluster_fast_greedy&amp;quot; &amp;quot;cluster_fast_greedy&amp;quot; ...
##  $ network          : chr  &amp;quot;network_1&amp;quot; &amp;quot;network_1&amp;quot; &amp;quot;network_1&amp;quot; &amp;quot;network_1&amp;quot; ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting table includes the global modularity for each method and network, and the estimated group membership (&lt;code&gt;$Ind_Cluster&lt;/code&gt;) of all individuals within each networks using each of the methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;compare-the-detected-clusters-with-simulated-groups&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2.4 Compare the detected clusters with simulated groups&lt;/h3&gt;
&lt;p&gt;Finally, I compare the results of the different algorithms with the simulated networks.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set up dataframe for loop
cluster_summary &amp;lt;- tibble(
  Cluster_method = rep(cluster_methods, each = length(networks)),
  Scenario = rep(networks, times = length(cluster_methods)),
  Dyads_n = length(unique(network_df$dyad)),
  Groups_n = length(unique(network_df$Ind_A_Group)),
  Clusters_n = NA,
  Dyads_correct_n = NA,
  Dyads_correct_prop = NA,
  Modularity = NA)
  
# Use a loop to summarize for all methods and networks the 1) number of clusters
# in comparison to simulated groups, and 2) the number of dyads correctly placed
# together in a cluster.
for(row_i in 1:nrow(cluster_summary)){
  community_temp &amp;lt;- filter(community_df,
                           method == cluster_summary[row_i,]$Cluster_method &amp;amp;
                           network == cluster_summary[row_i,]$Scenario)
  
  cluster_summary_temp &amp;lt;- network_df %&amp;gt;%
    select(Ind_A, Ind_B, Ind_A_Group, Ind_B_Group) %&amp;gt;%
    left_join(select(community_temp, Ind_A = Ind, Ind_A_Cluster = Ind_Cluster),
              by = &amp;quot;Ind_A&amp;quot;) %&amp;gt;%
    left_join(select(community_temp, Ind_B = Ind, Ind_B_Cluster = Ind_Cluster),
              by = &amp;quot;Ind_B&amp;quot;) %&amp;gt;%
    mutate(same_group = (Ind_A_Group == Ind_B_Group),
           same_cluster = (Ind_A_Cluster == Ind_B_Cluster))
  
    cluster_summary[row_i,]$Clusters_n = length(unique(community_temp$Ind_Cluster))
    cluster_summary[row_i,]$Dyads_correct_n = sum(cluster_summary_temp$same_group == cluster_summary_temp$same_cluster)
    cluster_summary[row_i,]$Modularity = unique(community_temp$global_modularity)
}

# Calculate variables comparing simulated with detected clusters and apply some
# other cosmetic changes
cluster_summary &amp;lt;- cluster_summary %&amp;gt;% 
  mutate(Dyads_correct_prop = Dyads_correct_n/Dyads_n,
         Clusters_vs_Groups = Clusters_n/Groups_n,
         Scenario = str_replace(Scenario, &amp;quot;network_&amp;quot;, &amp;quot;S&amp;quot;),
         Cluster_method = str_remove(Cluster_method, &amp;quot;cluster_&amp;quot;)) %&amp;gt;% 
  mutate_if(is.numeric, ~round(., 2))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the resulting table:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::kable(cluster_summary)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Cluster_method&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Scenario&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Dyads_n&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Groups_n&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Clusters_n&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Dyads_correct_n&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Dyads_correct_prop&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Modularity&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Clusters_vs_Groups&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;fast_greedy&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;fast_greedy&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;fast_greedy&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.31&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;fast_greedy&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;infomap&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;infomap&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;304&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;infomap&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;304&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;infomap&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;304&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;label_prop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;848&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.69&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;label_prop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;304&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;label_prop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.29&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;label_prop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;848&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.69&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;optimal&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;optimal&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;optimal&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.31&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;optimal&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;louvain&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;louvain&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;louvain&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.31&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;louvain&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;walktrap&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;walktrap&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;walktrap&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.31&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;walktrap&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;S4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Perhaps, it’s a bit easier to interpret the results when graphically illustrated.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;illustrate-results&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2.5 Illustrate results&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_plot &amp;lt;- function(df, y_var, y_title){
  y_var &amp;lt;- sym(y_var)
  ggplot(data = df,
            aes(x = Scenario, y = !!y_var, group = Cluster_method, color = Cluster_method)) +
  geom_line(size = 1.25, alpha = .6) +
  geom_point(color = &amp;quot;black&amp;quot;, size = 2, alpha = .5) +
  ggrepel::geom_label_repel(data = filter(df, Scenario == &amp;quot;S4&amp;quot;),
            aes(x = Scenario, y = !!y_var, color = Cluster_method, label = Cluster_method),
            size = 4,
            hjust = 0, nudge_x = .5, direction = &amp;quot;y&amp;quot;,
            label.padding = .1, point.padding = .5, segment.size = .25,
            show.legend = F) +
  scale_x_discrete(limits = c(&amp;quot;S1&amp;quot;, &amp;quot;S2&amp;quot;, &amp;quot;S3&amp;quot;, &amp;quot;S4&amp;quot;, rep(&amp;quot;&amp;quot;, 4))) +
  scale_y_continuous(name = y_title, limits = c(0, NA)) +
  theme_minimal() +
  theme(legend.position = &amp;quot;none&amp;quot;)
}

cluster_plot &amp;lt;- create_plot(df = cluster_summary,
                            y_var = &amp;quot;Clusters_vs_Groups&amp;quot;,
                            y_title = &amp;quot;Detected # Clusters / True # Groups&amp;quot;)
dyad_plot &amp;lt;- create_plot(df = cluster_summary,
                         y_var = &amp;quot;Dyads_correct_prop&amp;quot;,
                         y_title = &amp;quot;Correct # Dyads / Total # Dyads&amp;quot;)
modularity_plot &amp;lt;- create_plot(df = cluster_summary,
                               y_var = &amp;quot;Modularity&amp;quot;,
                               y_title = &amp;quot;Modularity&amp;quot;)

cowplot::plot_grid(cluster_plot, dyad_plot, modularity_plot, ncol = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/social-clusters-II/index_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2.6 Conclusions&lt;/h3&gt;
&lt;p&gt;For the created networks, here are my conclusions:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;None(!) of the tested algorithms correctly identified the number of groups in S1 and S2 (the two scenarios with ‘close groups’). But three of the four algorithms that did best in these two scenarios (&lt;em&gt;louvain&lt;/em&gt;, &lt;em&gt;walktrap&lt;/em&gt;, &lt;em&gt;optimal&lt;/em&gt;) perfectly identified groups in S3 and S4. Thus, under the circumstances simulated in S1 and S2, which are fairly common in reality I believe, one should be careful with the interpretation of the number of detected clusters.&lt;/li&gt;
&lt;li&gt;With the exception of S1, the &lt;em&gt;infomap&lt;/em&gt; algorithm did not very well and put all individuals in the same cluster. The &lt;em&gt;label_prob&lt;/em&gt; method was a bit better than &lt;em&gt;infomap&lt;/em&gt;, but always failed to identify the correct number of groups.&lt;/li&gt;
&lt;li&gt;The comparison of modularity values confirms that the algorithms with the highest modularity values also were the best in identifying groups and individual group memberships (note that these modularity values are calculated without knowing the ‘true’ groups).&lt;/li&gt;
&lt;li&gt;As mentioned above and shown in the plot below, the simulation actually created many, fairly weak relationships among individuals, even among individuals from different groups. Perhaps, this makes the detection of clusters challenging for the algorithms, especially if the distinction between different groups within a larger community is variable (as in S1, S2). Thus, when applying such methods to identify clusters, it seems to be important to simulate some networks similar to the observed networks and try which methods are most appropriate given the circumstances.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;identifying-and-illustrating-clusters-with-ggraph&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2.7 Identifying and illustrating clusters with &lt;code&gt;ggraph&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ggraph&lt;/code&gt; package also supports the use of the &lt;code&gt;igraph::cluster_&lt;/code&gt; functions, which can be nicely used for a quick look at clusters. Here, both the detected clusters (using different colors) and the simulated groups (using different shapes) are shown. In contrast to the plots above, all relationships (or &lt;em&gt;edges&lt;/em&gt;) are shown, including those &amp;lt; 0.3, which makes the networks look much denser than in the other plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;network_df %&amp;gt;% 
  select(from = Ind_A, to = Ind_B, weight = S1) %&amp;gt;% 
  as_tbl_graph(directed = FALSE) %&amp;gt;% 
  activate(nodes) %&amp;gt;% 
  left_join(distinct(individual_df, name = Ind, group = Group),
            by = &amp;quot;name&amp;quot;) %&amp;gt;%
  mutate(detected_cluster = as.factor(group_louvain())) %&amp;gt;% 
  ggraph(., layout = &amp;quot;fr&amp;quot;) +
  geom_edge_arc(aes(width = weight),
                alpha = 0.3, strength = 0.1) +
  scale_edge_width(name = &amp;quot;Association Index&amp;quot;, range = c(0, 1.5)) +
  geom_node_point(aes(fill = detected_cluster, shape = group),
                  color = &amp;quot;black&amp;quot;, size = 4) +
  scale_fill_brewer(type = &amp;quot;qual&amp;quot;, palette = 2) +
  scale_shape_manual(values = c(21, 22, 23, 24)) +
  theme_graph() +
  guides(fill = guide_legend(override.aes = list(shape=21)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/social-clusters-II/index_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It’s clear from this plot that group_a and group_b are put in the same cluster by the &lt;em&gt;louvain&lt;/em&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Creation and Detection of Clusters in Social Networks - Part 1</title>
      <link>/post/social-clusters-i/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/post/social-clusters-i/</guid>
      <description>


&lt;p&gt;Social networks often exhibit some kind of clustering (or &lt;em&gt;community structure&lt;/em&gt;), such as distinct social groups in animal societies, or kin groups (or families) within social groups. Individuals within such clusters are more likely to interact with each other than individuals from different clusters.&lt;/p&gt;
&lt;p&gt;There are many algorithms to detect clusters in social networks, and one might work better than another under some circumstances (see, e.g., &lt;a href=&#34;https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0159161&#34;&gt;Emmons et al. 2016&lt;/a&gt;). Therefore, the aim of this and the next post is to simulate clustered social networks, and then to apply and compare some of the methods provided by the R-package &lt;code&gt;igraph&lt;/code&gt; with these networks.&lt;/p&gt;
&lt;p&gt;Note that there are functions available for R to create such networks, but here I create these networks ‘from scratch’ for two reasons:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;It is easier to understand (and modify) the process underlying the network simulation.&lt;/li&gt;
&lt;li&gt;Some clusters might be ‘closer’ to each other than other clusters. For example, individuals from two close families might be more likely to interact with each other than with individuals from other families. Perhaps, this can be achieved with the available functions, but I preferred to model these different degrees of clustering on my own.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This project will consist of two parts:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Simulate clustered social networks.&lt;/strong&gt; I will simulate values of an ‘association index’ (reflecting social relationships) for dyads of individuals within the same groups, for dyads of individuals from ‘close’ groups, and for dyads consisting of individuals from different groups that are not close to each other. In total, I will simulate four different scenarios with varying degrees of clustering.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Determine clustering using different methods and compare the results.&lt;/strong&gt; I will use several of the methods provided by the &lt;code&gt;igraph&lt;/code&gt; package to detect clusters in these simulated networks. Then, I will calculate and compare the modularity of different networks, the number of detected clusters in comparison to simulated clusters, and the proportion of dyads correctly assigned to the same cluster.&lt;/p&gt;
&lt;div id=&#34;simulate-clustered-social-networks&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;1. Simulate clustered social networks&lt;/h1&gt;
&lt;div id=&#34;prepare-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1.1 Prepare R&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(list = ls())
library(tidyverse)
library(tidygraph)
library(ggraph)
library(igraph)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-dataframe-with-identities-and-group-memberships-of-individuals&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1.2 Create a dataframe with identities and group memberships of individuals&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Specify number of individuals and groups (or clusters)
n_inds &amp;lt;- 50
n_groups &amp;lt;- 4

# Create IDs for all individuals and assign random social groups to individuals
set.seed(1209)
individual_df &amp;lt;- tibble(
  Ind = paste0(&amp;quot;ind_&amp;quot;, str_pad(1:n_inds, width = nchar(n_inds), pad = &amp;quot;0&amp;quot;)),
  Group = sample(x = paste0(&amp;quot;group_&amp;quot;, letters[1:n_groups]),
                 size = n_inds,
                 replace = T))

# Create a dataframe with all possible combinations of individuals except &amp;#39;self-relationships&amp;#39;
network_df &amp;lt;- expand.grid(Ind_A = individual_df$Ind,
                          Ind_B = individual_df$Ind,
                          stringsAsFactors = F) %&amp;gt;%
  left_join(select(individual_df, Ind_A = Ind, Ind_A_Group = Group),
            by = &amp;quot;Ind_A&amp;quot;) %&amp;gt;% 
  left_join(select(individual_df, Ind_B = Ind, Ind_B_Group = Group),
            by = &amp;quot;Ind_B&amp;quot;) %&amp;gt;% 
  filter(Ind_A != Ind_B)

# Limit the dataframe to one row per dyad for an undirected network
network_df &amp;lt;- network_df %&amp;gt;% 
  arrange(Ind_A, Ind_B) %&amp;gt;% 
  mutate(dyad = if_else(Ind_A &amp;lt; Ind_B, paste0(Ind_A, &amp;quot;_&amp;quot;, Ind_B),
                        paste0(Ind_B, &amp;quot;_&amp;quot;, Ind_A))) %&amp;gt;% 
  distinct(dyad, .keep_all = T)

head(network_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ind_A  Ind_B Ind_A_Group Ind_B_Group          dyad
## 1 ind_01 ind_02     group_b     group_a ind_01_ind_02
## 2 ind_01 ind_03     group_b     group_c ind_01_ind_03
## 3 ind_01 ind_04     group_b     group_b ind_01_ind_04
## 4 ind_01 ind_05     group_b     group_d ind_01_ind_05
## 5 ind_01 ind_06     group_b     group_a ind_01_ind_06
## 6 ind_01 ind_07     group_b     group_b ind_01_ind_07&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;assign-values-or-weights-to-all-dyadic-relationships.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1.3 Assign values (or ‘weights’) to all dyadic relationships.&lt;/h3&gt;
&lt;p&gt;Here, I use 4 different scenarios:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Scenario (S1):&lt;/strong&gt; Within-group relationships (&lt;em&gt;wgr&lt;/em&gt;) are relatively strong in comparison to between-group relationships (&lt;em&gt;bgr&lt;/em&gt;). Relationships of individuals between ‘close groups’ (&lt;em&gt;bcgr&lt;/em&gt;) are intermediate.&lt;br /&gt;
&lt;strong&gt;2. Scenario (S2):&lt;/strong&gt; Similar to S1, but differences between &lt;em&gt;wgr&lt;/em&gt;, &lt;em&gt;bcgr&lt;/em&gt;, and &lt;em&gt;bgr&lt;/em&gt; are smaller.&lt;br /&gt;
&lt;strong&gt;3. Scenario (S3):&lt;/strong&gt; &lt;em&gt;Wgr&lt;/em&gt; are relatively strong in comparison to &lt;em&gt;bgr&lt;/em&gt;. This scenario is identical to S1 except that there are no close groups.&lt;br /&gt;
&lt;strong&gt;4. Scenario (S4):&lt;/strong&gt; Differences between &lt;em&gt;wgr&lt;/em&gt; and &lt;em&gt;bgr&lt;/em&gt; are smaller than in S3. This scenario is identical to S2 except that there are no close groups.&lt;/p&gt;
&lt;p&gt;Thus, &lt;em&gt;bgr&lt;/em&gt; are the same in all four scenarios, only &lt;em&gt;bcgr&lt;/em&gt; and &lt;em&gt;wgr&lt;/em&gt; are varied. Furthermore, &lt;em&gt;wgr&lt;/em&gt; are the same for S1 and S3, and for S2 and S4 (see plot below).&lt;/p&gt;
&lt;p&gt;To create the social networks, I sample values from beta distributions simulating an &lt;strong&gt;Association Index&lt;/strong&gt;. Such an index is commonly used in animal behavioural research to assess relationships between individuals (see, e.g., the great book by &lt;a href=&#34;https://www.press.uchicago.edu/ucp/books/book/chicago/A/bo5607202.html&#34;&gt;Whitehead, 2008&lt;/a&gt;), and they range from 0 to 1. For example, individuals that never associate with each other would have an association index of 0, and two individuals that are always associated with each other have an index of 1.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set the parameters (i.e. shape parameters of the beta distribution) for all 4
# scenarios
bgr &amp;lt;- c(1, 8)
bcgr_1 &amp;lt;- c(3, 8)
wgr_1 &amp;lt;- wgr_3 &amp;lt;- c(8, 8)

bcgr_2 &amp;lt;- c(1.5, 8)
wgr_2 &amp;lt;- wgr_4 &amp;lt;- c(4, 8)

# Define function for plotting of beta distributions
plot_beta &amp;lt;- function(x, alpha_beta, main = &amp;quot;&amp;quot;, xlab = &amp;quot;&amp;quot;, ylab = &amp;quot;&amp;quot;, ...){
  alpha = alpha_beta[1]
  beta =  alpha_beta[2]
  plot(x, dbeta(x, alpha, beta), type = &amp;quot;l&amp;quot;,
       yaxt = &amp;quot;n&amp;quot;, xlab = &amp;quot;&amp;quot;, ylab = &amp;quot;&amp;quot;, bty = &amp;quot;n&amp;quot;, ...)
  title(ylab = ylab, line = 0)
  title(xlab = xlab, line = 2)
  title(main = main, line = 1)
  axis(side = 2, label = F, lwd.ticks = F)
}
# Plot the distributions of social relationships according to these parameters
{
  par(mfrow = c(4,3), mar = c(3, 2, 2, 1))
  x &amp;lt;- seq(0, 1, length.out = 40)
  
  # S1
  plot_beta(x, bgr, main = &amp;quot;Between-group - S1&amp;quot;,
            ylab = &amp;quot;Prob. density function&amp;quot;)
  plot_beta(x, bcgr_1, main = &amp;quot;Between close-groups - S1&amp;quot;)
  plot_beta(x, wgr_1, main = &amp;quot;Within-group S1&amp;quot;)
  
  # S2
  plot_beta(x, bgr, main = &amp;quot;Between-group - S2&amp;quot;,
            ylab = &amp;quot;Prob. density function&amp;quot;)
  plot_beta(x, bcgr_2, main = &amp;quot;Between close-groups - S2&amp;quot;,
            xlab = &amp;quot;Association Index&amp;quot;)
  plot_beta(x, wgr_2, main = &amp;quot;Within-group - S2&amp;quot;)
  
  # S3
  plot_beta(x, bgr, main = &amp;quot;Between-group - S3&amp;quot;,
            ylab = &amp;quot;Prob. density function&amp;quot;)
  plot.new()
  plot_beta(x, wgr_3, main = &amp;quot;Within-group - S3&amp;quot;)
  
  # S4
  plot_beta(x, bgr, main = &amp;quot;Between-group - S4&amp;quot;, 
            ylab = &amp;quot;Prob. density function&amp;quot;,
            xlab = &amp;quot;Association Index&amp;quot;)
  plot.new()
  plot_beta(x, wgr_4, main = &amp;quot;Within-group - S4&amp;quot;,
            xlab = &amp;quot;Association Index&amp;quot;)
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/social-clusters-I/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;These distributions can be used to get values for the strength of relationships. To do so, I first define a function to sample dyadic values from the different distributions depending on group membership of both individuals. Then, I use this function to get values for all dyads and for all scenarios. For S1 and S2, group A and B are defined as the close groups.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_weights &amp;lt;- function(network_df, wgr, bgr, bcgr = NA, close_groups = NA){
  # Create empty vector for all weights
  weights = rep(NA_real_, time = nrow(network_df))
  # Go through all dyads and sample from respective distribution, dependent on
  # the group membership of both individuals
  for(i in seq_along(weights)){
    ind_A_group &amp;lt;- network_df[i, &amp;quot;Ind_A_Group&amp;quot;]
    ind_B_group &amp;lt;- network_df[i, &amp;quot;Ind_B_Group&amp;quot;]
    # Both individuals in same group
    if(ind_A_group == ind_B_group){
      weights[i] &amp;lt;- rbeta(n = 1, shape1 = wgr[1], shape2 = wgr[2])
    }
    # Individuals in different groups
    if(ind_A_group != ind_B_group){
      weights[i] &amp;lt;- rbeta(n = 1, shape1 = bgr[1], shape2 = bgr[2])
    }
    # If some groups are &amp;#39;closer&amp;#39; to each other, use specified distributions for
    # this kind of relationships
    if(all(!is.na(bcgr)) &amp;amp; all(!is.na(close_groups)) &amp;amp;
       ind_A_group != ind_B_group &amp;amp;
       ind_A_group %in% close_groups &amp;amp; 
       ind_B_group %in% close_groups){
      weights[i] &amp;lt;- rbeta(n = 1, shape1 = bcgr[1], shape2 = bcgr[2])
      }
  }
  return(weights)
}

set.seed(1209)
network_df$S1 &amp;lt;- get_weights(network_df, wgr = wgr_1, bgr = bgr, bcgr = bcgr_1,
                             close_groups = c(&amp;quot;group_a&amp;quot;, &amp;quot;group_b&amp;quot;))
network_df$S2 &amp;lt;- get_weights(network_df, wgr = wgr_2, bgr = bgr, bcgr = bcgr_2,
                             close_groups = c(&amp;quot;group_a&amp;quot;, &amp;quot;group_b&amp;quot;))
network_df$S3 &amp;lt;- get_weights(network_df, wgr = wgr_3, bgr = bgr)
network_df$S4 &amp;lt;- get_weights(network_df, wgr = wgr_4, bgr = bgr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the last step for part 1 of this post, I will illustrate the created networks using the &lt;code&gt;ggraph&lt;/code&gt; package (look &lt;a href=&#34;https://www.data-imaginist.com/2019/1-giraffe-2-giraffe-go/&#34;&gt;here&lt;/a&gt; for an introduction to this package by the author)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1209)
clustered_network_plot &amp;lt;- network_df %&amp;gt;% 
  pivot_longer(cols = matches(&amp;quot;S\\d&amp;quot;),
               names_to = &amp;quot;Scenario&amp;quot;,
               values_to = &amp;quot;weight&amp;quot;) %&amp;gt;% 
  select(from = Ind_A, to = Ind_B, weight, Scenario) %&amp;gt;% 
  filter(weight &amp;gt;= 0.3) %&amp;gt;% 
  as_tbl_graph() %&amp;gt;% 
  activate(nodes) %&amp;gt;% 
  left_join(distinct(individual_df, name = Ind, group = Group),
            by = &amp;quot;name&amp;quot;) %&amp;gt;% 
  ggraph(., layout = &amp;quot;fr&amp;quot;) +
  geom_edge_arc(aes(width = weight),
                alpha = 0.4, strength = 0.1) +
  scale_edge_width(name = &amp;quot;Association Index&amp;quot;,
                   range = c(0.2, 1)) +
  geom_node_point(aes(fill = group, shape = group),
                  size = 2) +
  scale_fill_brewer(type = &amp;quot;qual&amp;quot;, palette = 2) +
  scale_shape_manual(values = c(21, 22, 23, 24)) +
  facet_edges(~Scenario) +
  theme_graph()

clustered_network_plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/social-clusters-I/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;
As modeled above, S1 and S3 are very similar, except that group A and B are closer to each other in S1. S2 and S4 have both weaker within-group relationships compared to their counterparts S1 and S3, respectively. Thus, I have four different networks with different degrees of clustering, and in two of these networks, two of the four groups are closer to each other than to the other groups.&lt;/p&gt;
&lt;p&gt;In the next post, I will use different algorithms from the &lt;code&gt;igraph&lt;/code&gt; package to check how well these clusters can be detected.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
